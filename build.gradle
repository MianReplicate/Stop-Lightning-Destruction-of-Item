plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "${architectury_loom_version}" apply false
    id "io.github.pacifistmc.forgix" version "${forgix_version}"
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1' apply false
    id 'com.github.johnrengelman.shadow' version '7.1.2' apply false
}

forgix {
    group = rootProject.maven_group // This is the common group of the mod which by default in Architectury Template it's defined as "maven_group" in your gradle.properties. If this property is not defined then by default it'll fetch the group from the maven_group property in your gradle.properties
        mergedJarName = "${mod_id}-${mod_version}+${minecraft_version}.jar" // This is the name of the merged jar. If this property is not defined then by default it'll fetch the "archives_base_name" property with the "mod_version" property in your gradle.properties.
    outputDir = "build/libs/Merged" // This is the output directory of the merged jar from the root project. If this property is not defined then by default it's set to "Merged".

    fabric {
        projectName = "fabric" // This is the name of the fabric project. If this property is not defined then by default it'll set to "fabric" since that's the name the Architectury Template uses.
        jarLocation = "build/libs/${mod_id}-${mod_version}.jar" // This is the location of the fabric jar from the fabric project. If this property is not defined then by default it fetches the jar with the shortest name.
    }

    forge {
        projectName = "forge"
        jarLocation = "build/libs/${mod_id}-${mod_version}.jar" // This is the location of the forge jar from the forge project. If this property is not defined then by default it fetches the jar with the shortest name.
    }

}

architectury {
    minecraft = minecraft_version
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'idea'
    apply plugin: 'maven-publish'
    apply plugin: 'architectury-plugin'
    apply plugin: "dev.architectury.loom"
    apply plugin: 'org.jetbrains.gradle.plugin.idea-ext'

    archivesBaseName = mod_id
    version = mod_version
    group = rootProject.maven_group

    repositories {
        mavenLocal()
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.
        maven { url 'https://jitpack.io' }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = 21
    }

    java {
        toolchain {
            languageVersion.set(JavaLanguageVersion.of("${java_version}"))
        }

        withSourcesJar()
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
        options.release.set(JavaLanguageVersion.of("${java_version}").asInt())

        javaToolchains {
            compilerFor {
                languageVersion.set(JavaLanguageVersion.of("${java_version}"))
            }
        }
    }

    sourceSets.test {
        java.srcDirs = [ ]
        resources.srcDirs = [ ]
    }

    architectury {
        minecraft = "${minecraft_version}"
    }

//    loom {
//        accessWidenerPath.set(project(':common').loom.accessWidenerPath)
//        silentMojangMappingsLicense()
//    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        // The following line declares the mojmap mappings, you may use other mappings as well
        // The following line declares the yarn mappings you may select this one as well.
        // mappings "net.fabricmc:yarn:@YARN_MAPPINGS@:v2"
        mappings loom.officialMojangMappings()

        compileOnly 'com.google.code.findbugs:jsr305:3.0.2'
        compileOnly 'com.google.errorprone:error_prone_annotations:2.11.0'
    }

    processResources {
        project.properties.each {
            inputs.property "${it.key}", "${it.value}"
        }

        filesMatching([ '*.mixins.json', 'pack.mcmeta', 'META-INF/mods.toml', 'fabric.mod.json', 'architectury.common.json' ]) {
            expand project.properties
        }
    }


    build.finalizedBy(mergeJars)
    assemble.finalizedBy(mergeJars)
}

apply plugin: 'org.jetbrains.gradle.plugin.idea-ext'

idea.module {
    excludeDirs += [
            file('.idea'),
            file('.gradle'),
            file('gradle')
    ]
}